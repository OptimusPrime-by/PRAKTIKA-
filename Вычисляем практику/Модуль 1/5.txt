Дано предложение. Напечатать все символы, расположенные между первой и второй запятой. 
Если второй запятой нет, 
то должны быть напечатаны все символы, расположенные после единственной имеющейся запятой. 
#include <iostream>
#include <Windows.h>

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    char str[256] = { 0 };
    cout << "Введите строку: ";
    cin.getline(str, 256);

    bool is_first_comma_found = 0,
        is_second_comma_found = 0;
    int first_comma_index = -1,
        second_comma_index = 256;

    for (int i = 0; str[i] != *"\0" && i < 256; i++) {
        if (!is_first_comma_found && str[i] == *",") {
            first_comma_index = i;
            is_first_comma_found = 1;
        }
        else
            if (is_first_comma_found && !is_second_comma_found && str[i] == *",") {
                second_comma_index = i;
                is_second_comma_found = 1;
            }
    }

    if (is_first_comma_found) {
        for (int i = first_comma_index + 1; i < second_comma_index; i++) {
            cout << str[i];
        }
        cout << endl;
    }
    else {
        cout << "В предложении нет ни одной запятой\n";
    }

    system("pause");
    return 0;
}
//9.153
Дан текст. Найти наибольшее количество идущих подряд одинаковых символов.

#include <iostream>
#include <Windows.h>

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    char str[256] = { 0 };
    cout << "Введите строку: ";
    cin.getline(str, 256);

    bool is_first_comma_found = 0,
        is_second_comma_found = 0;
    int similar_amount = 0,
        max_similar_amount = 0;
    char letter = str[0];
    for (int i = 0; str[i] != *"\0" && i < 256; i++) {
        if (letter == str[i]) {
            similar_amount++;
            if (similar_amount > max_similar_amount) {
                max_similar_amount = similar_amount;
            }
        }
        else
        {
            similar_amount = 1;
        }
        letter = str[i];
    }

    cout << "Количество символов, идущих подряд: " << max_similar_amount << endl;

    system("pause");
    return 0;
}

//10.7
Даны основания и высоты двух равнобедренных трапеций.
Найти сумму их периметров. (Определить
функцию для расчета периметра равнобедренной трапеции по ее основаниям и высоте.)

#include <iostream>

using namespace std;

double Perimeter(double base1, double base2, double height)
{
    return(base1 + base2 + 2 * sqrt((base1 - base2) * (base1 - base2) / 4 + height * height));
}

int main()
{
    setlocale(LC_ALL, "rus");

    double base_up_1, base_down_1, height_1,
        base_up_2, base_down_2, height_2;
    cout << "Введите длины оснований и высоту первой трапеции: ";
    cin >> base_up_1 >> base_down_1 >> height_1;
    cout << "Введите длины оснований и высоту второй трапеции: ";
    cin >> base_up_2 >> base_down_2 >> height_2;

    cout << "Сумма периметров двух трапеций равна " << Perimeter(base_up_1, base_down_1, height_1) + Perimeter(base_up_2, base_down_2, height_2) << endl;

    system("pause");
    return 0;
}